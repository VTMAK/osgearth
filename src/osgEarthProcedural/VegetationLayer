/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_BINDLESS_H
#define OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_BINDLESS_H

#include "Export"
#include "Biome"
#include "LifeMapLayer"
#include "BiomeLayer"
#include "BiomeManager"

#include <osgEarth/PatchLayer>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>

#include <osg/Drawable>

#include <chrono>

namespace osgEarth { namespace Procedural
{
    using namespace osgEarth;

    /**
     * Layer that renders trees and undergrowth.
     */
    class OSGEARTHPROCEDURAL_EXPORT VegetationLayer : public PatchLayer
    {
    public:
        class OSGEARTHPROCEDURAL_EXPORT Options : public PatchLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, PatchLayer::Options);

            //! Biomes layer in the map
            OE_OPTION_LAYER(BiomeLayer, biomeLayer);

            //! Whether to render with GL_ALPHA_TO_COVERAGE (default is true)
            OE_OPTION(bool, alphaToCoverage);

            struct OSGEARTHPROCEDURAL_EXPORT Group
            {
                //! Whether to render this group at all
                OE_OPTION(bool, enabled);

                //! Terrain LOD at which to render this group
                OE_OPTION(unsigned, lod);

                //! Not used
                OE_OPTION(float, maxRange);

                //! Number of assets to place per square kilometer
                OE_OPTION(int, instancesPerSqKm);

                //! Whether assets in this group cast shadows
                OE_OPTION(bool, castShadows);

                //! Percentage of overlap allowed in asset bounding spheres [0..1]
                OE_OPTION(float, overlap);

                //! SSE scale factor for far visibility
                OE_OPTION(float, farPixelScale);

                // internal
                osg::ref_ptr<osg::StateSet> _drawStateSet;
                BiomeManager::CreateImpostorFunction _createImpostor;

                Group();
            };

            using GroupMap = vector_map<std::string, Group>;
            OE_PROPERTY(GroupMap, groups);
            Group& group(const std::string& name);
            const Group& group(const std::string& name) const;

            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
            Group _emptyGroup;
        };

    public:
        META_Layer(osgEarth, VegetationLayer, Options, PatchLayer, Vegetation);

        //! Layer containing biome data
        void setBiomeLayer(BiomeLayer*);
        BiomeLayer* getBiomeLayer() const;

        //! Layer containing life map data
        void setLifeMapLayer(LifeMapLayer*);
        LifeMapLayer* getLifeMapLayer() const;

        //! LOD at which to draw ground cover
        bool hasEnabledGroupAtLOD(unsigned lod) const;
        std::string getGroupAtLOD(unsigned lod) const;
        unsigned getGroupLOD(const std::string&) const;

        //! Whether any of the vegetation casts shadows on the terrain
        //void setCastShadows(bool value);
        bool getCastShadows() const;

        //! Whether to enable alpha-to-coverage mode.
        //! Only use this when multisampling it ON
        void setUseAlphaToCoverage(bool value);
        bool getUseAlphaToCoverage() const;

        //! Visibility range of the specified asset group
        void setMaxRange(const std::string&, float);
        float getMaxRange(const std::string&) const;

        //! Whether to render the specified group
        void setEnabled(const std::string&, bool);
        bool getEnabled(const std::string&) const;

        //! LOD/SSE scaling factors (one per group)
        void setSSEScales(const osg::Vec4f& lods);
        osg::Vec4f getSSEScales() const;

        //! Force regeneration of the visible data
        void dirty();

    public:
        struct Placement
        {
            //! Location in map coordinates
            OE_PROPERTY(osg::Vec3d, mapPoint);

            //! Location in tile local tangent plane coordinates
            OE_PROPERTY(osg::Vec2d, localPoint);

            //! Location in tile normalized coordinates [0..1]
            OE_PROPERTY(osg::Vec2f, uv);

            //! Scale of asset
            OE_PROPERTY(osg::Vec3f, scale);

            //! Rotation of asset in radians
            OE_PROPERTY(float, rotation);

            //! Pointer to asset model record
            OE_PROPERTY(ResidentModelAsset::Ptr, asset);

            //! Density of the LifeMap at this location
            OE_PROPERTY(float, density);
        };

        //! Gets all the asset placement information for a given
        //! tile within the given asset group.
        //! @param key Tile key for which to generate asset placements
        //! @param group Group for which to generate placements (e.g. TREES or UNDERGROWTH)
        //! @param loadBiomesOnDemand When set to true, load the asset models necessary
        //!   for this tile key immediately if they are not already resident. During a normal
        //!   runtime frame loop this should be false since biome assets get loaded asynchronously.
        //!   Set to true if you are loading asset placements without a frame loop.
        //! @param output Output vector to populate with results
        //! @param progress Progress/cancelation tracker
        bool getAssetPlacements(
            const TileKey& key,
            const std::string& group,
            bool loadBiomesOnDemand,
            std::vector<Placement>& output,
            ProgressCallback* progress) const;

    protected:

        virtual void init() override;
        virtual Status openImplementation() override;
        virtual Status closeImplementation() override;

    public:

        virtual void update(osg::NodeVisitor& nv) override;
        virtual void cull(const TileBatch&, osg::NodeVisitor& nv) const override;

        virtual void addedToMap(const Map* map) override;
        virtual void removedFromMap(const Map* map) override;
        virtual void prepareForRendering(TerrainEngine*) override;

        virtual void resizeGLObjectBuffers(unsigned maxSize) override;
        virtual void releaseGLObjects(osg::State* state) const override;

    protected:
        virtual ~VegetationLayer();

        struct LayerAcceptor : public PatchLayer::AcceptCallback
        {
            VegetationLayer* _layer;
            LayerAcceptor(VegetationLayer* layer) : _layer(layer) { }
            bool acceptLayer(osg::NodeVisitor& nv, const osg::Camera* camera) const;
            bool acceptKey(const TileKey& key) const;
        };
        friend struct LayerAcceptor;

        LayerReference<LifeMapLayer> _lifeMapLayer;
        LayerReference<BiomeLayer> _biomeLayer;
        osg::observer_ptr<const Map> _map;

        void buildStateSets();
        void reset();

        // call from UPDATE peridoically to see if new biomes
        // caused new assets to page in.
        // Returns true if the revision changes and a job to load new
        // assets started.
        bool checkForNewAssets() const;

        // Result of background drawable-creation jobs
        using FutureDrawable = Future<osg::ref_ptr<osg::Drawable>>;

        struct TileKeyAndRevision {
            TileKey key;
            int revision;
            bool operator == (const TileKeyAndRevision& rhs) const {
                return key == rhs.key && revision == rhs.revision;
            }
            std::size_t operator()(const TileKeyAndRevision& rhs) const {
                return hash_value_unsigned(key.hash(), revision);
            }
        };

        // One tile's drawable vegetation.
        struct Tile
        {
            using Ptr = std::shared_ptr<Tile>;
            using WeakPtr = std::weak_ptr<Tile>;
            FutureDrawable _drawable;
        };

        using Tiles = std::unordered_map<
            TileKeyAndRevision,
            Tile::Ptr,
            TileKeyAndRevision>;

        // Shared (amongst all cameras) cache of vegetation tiles,
        // indexed by a revisioned tile key.
        mutable Mutexed<Tiles> _tiles;

        using Placeholders = std::unordered_map<
            TileKey,
            Tile::Ptr>;

        // Shared cache of tile placeholders. These are just tiles,
        // but indexed only by the tile key (no revision) and we 
        // use them to draw the old version of the tile while loading
        // a new revision.
        mutable Placeholders _placeholders;

        // One camera's view on a tile (and its placeholder).
        // We update the matrix each frame as necessary just before
        // accepting the cull.
        struct TileView
        {
            Tile::Ptr _tile;
            Tile::Ptr _placeholder;
            bool _loaded;
            osg::ref_ptr<osg::RefMatrix> _matrix;
            TileView() : _loaded(false) { }
        };

        // Data unique to a specific camera traversal
        // (multiple views, shadow cams, etc)
        struct CameraState
        {
            using Ptr = std::shared_ptr<CameraState>;

            using TileViews = std::unordered_map<
                TileKeyAndRevision,
                TileView,
                TileKeyAndRevision>;

            // views indexed by the current key+revision
            TileViews _views;
        };

        using CameraStates = vector_map<
            const osg::Camera*, 
            CameraState::Ptr>;

        // Collection tile views for each camera
        mutable Mutexed<CameraStates> _cameraState;

        // So we can timeout the layer and release resources
        mutable osg::FrameStamp _lastVisit;

        // noise texture. Put in the arena? Or global?
        osg::ref_ptr<osg::Texture> _noiseTex;
        TextureImageUnitReservation _noiseBinding;

        using AssetsByBiome = std::unordered_map<
            const Biome*,
            std::vector<ResidentModelAssetInstance>>;

        using Assets = vector_map<
            std::string,
            AssetsByBiome>;

        // Asynchronously loading resident asset collection
        mutable Future<Assets> _newAssets;

        // Resident asset collection (created by the BiomeManager)
        mutable Mutexed<Assets> _assets;

        // Track biome changes so we can reload as necessary
        mutable std::atomic_int _biomeRevision;

        // Uniform to scale the SSE
        osg::ref_ptr<osg::Uniform> _pixelScalesU;

        void configureImpostor(
            const std::string& groupName);

        Future<osg::ref_ptr<osg::Drawable>> createDrawableAsync(
            const TileKey&,
            const std::string&,
            const osg::BoundingBox& bbox) const;

        osg::ref_ptr<osg::Drawable> createDrawable(
            const TileKey&,
            const std::string&,
            const osg::BoundingBox& bbox,
            ProgressCallback* c) const;

        // Things that help us detect the presence of multisampling
        mutable bool _requestMultisampling;
        bool _multisamplingActivated;
        void activateMultisampling();
    };

} } // namespace osgEarth::Procedural

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::Procedural::VegetationLayer::Options);

#endif // OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_H
