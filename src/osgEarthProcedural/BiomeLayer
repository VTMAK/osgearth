/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_BIOME_LAYER_H
#define OSGEARTH_PROCEDURAL_BIOME_LAYER_H

#include "Export"
#include "Biome"
#include "BiomeManager"
#include <osgEarth/ImageLayer>
#include <osgEarth/LayerReference>
#include <osgEarth/FeatureSource>
//#include <osgEarth/LandCoverLayer>
#include <osgEarth/CoverageLayer>

namespace osgEarth
{
    namespace Procedural
    {
        using namespace osgEarth;

        struct LandCoverSample
        {
            OE_OPTION(std::string, biomeid);
            OE_OPTION(std::string, traits);
            OE_OPTION(float, dense);
            OE_OPTION(float, lush);
            OE_OPTION(float, rugged);

            LandCoverSample() { }

            LandCoverSample(const Config& conf)
            {
                conf.get("biome_id", biomeid());
                conf.get("traits", traits());
                conf.get("dense", dense());
                conf.get("lush", lush());
                conf.get("rugged", rugged());
            }

            bool valid() const {
                return
                    (biomeid().isSet() && !biomeid()->empty()) ||
                    traits().isSet() ||
                    dense().isSet() ||
                    lush().isSet() ||
                    rugged().isSet();
            }
        };


        /**
         * BiomeLayer creates rasters that encode Biome indices. 
         *
         * Each Biome has an associated integer index, corresponding to the order
         * in which it appears in the biome catalog. (NB: This index is totally
         * transparent to the user, and has no relationship to the Biome ID.)
         * For a given TileKey, this layer will create a raster for which each 
         * pixel holds an index corresponding to a specific Biome.
         *
         * At runtime this object will scan each raster, determine which Biomes
         * are currently visible, and tell the BiomeManager to load the corresponding
         * assets.
         */
        class OSGEARTHPROCEDURAL_EXPORT BiomeLayer : 
            public ImageLayer, 
            public osg::Observer
        {
        public:
            class OSGEARTHPROCEDURAL_EXPORT Options : public ImageLayer::Options
            {
            public:
                META_LayerOptions(osgEarth, Options, ImageLayer::Options);
                OE_OPTION_LAYER(FeatureSource, vectorLayer);
                OE_OPTION_LAYER(CoverageLayer, coverageLayer);
                OE_OPTION_SHAREDPTR(BiomeCatalog, biomeCatalog);
                OE_OPTION(float, blendRadius);
                OE_OPTION(std::string, biomeidField);
                virtual Config getConfig() const;
            private:
                void fromConfig(const Config& conf);
            };

        public:
            META_Layer(osgEarthProcedural, BiomeLayer, Options, ImageLayer, Biomes);

            //! The catalog holding all biome information
            std::shared_ptr<const BiomeCatalog> getBiomeCatalog() const;

            //! Manager that pages biome assets in and out
            BiomeManager& getBiomeManager() { return _biomeMan; }

            //! Vector layer that deliniates the base biomes
            FeatureSource* getVectorLayer() const;

            //! Optional coverage layer that can modify the biome selection
            CoverageLayer* getCoverageLayer() const;

            //! Whether to automatically load and unload biomes, or to 
            //! allow the user to manually do so with the setBiome() call.
            //! Default is true, meaning that as the user navigates the map,
            //! the manager will automatically load and unload biomes 
            //! according to location.
            //! NB: This is for debugging only -- not necessarily robust!
            void setAutoBiomeManagement(bool value);
            bool getAutoBiomeManagement() const;

        public: // Layer

            virtual void addedToMap(const Map*) override;

            virtual void removedFromMap(const Map*) override;

        protected: // Layer

            virtual void init() override;

            virtual Status openImplementation() override;

            virtual Status closeImplementation() override;

        protected: // ImageLayer

            virtual GeoImage createImageImplementation(
                const TileKey& key, 
                ProgressCallback* progress) const override;

            virtual void postCreateImageImplementation(
                GeoImage& createdImage,
                const TileKey& key,
                ProgressCallback* progress) const override;

        private:

            // control features for biome selection
            FeatureList _features;

            // spatial index for _features
            void* _pointIndex;
            void* _polygonIndex;

            // handles memory residency of biome asset data
            BiomeManager _biomeMan;

            // whether to automatically load and unload biomes based on
            // the vector control set (defaults to true)
            bool _autoBiomeManagement;

            using Tracker = std::unordered_map<osg::Object*, TileKey>;
            mutable Mutexed<Tracker> _tracker;
            void objectDeleted(void*) override;

            void trackImage(
                GeoImage& image,
                const TileKey& key,
                std::set<int>& biomeids) const;

            void loadPointControlSet();

            void loadPolygonControlSet();

        protected:
            virtual ~BiomeLayer() { }
        };

    }
} // namespace osgEarth::Procedural

#endif // OSGEARTH_PROCEDURAL_BIOME_LAYER_H
