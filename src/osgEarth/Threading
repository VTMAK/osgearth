/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once
#include <osgEarth/Export>
#include <unordered_set>

// bring in weejobs in the jobs namespace
#define WEEJOBS_EXPORT OSGEARTH_EXPORT
#include <osgEarth/weejobs.h>

namespace osgEarth
{
    /**
    * Pure interface for an object that can be canceled.
    */
    using Cancelable = WEEJOBS_NAMESPACE::cancelable;

    //! Sets the name of the curent thread
    extern OSGEARTH_EXPORT void setThreadName(const std::string& name);

    namespace Threading
    {
        // backwards compatibility typedefs.
        using Mutex = std::mutex;
        using RecursiveMutex = std::recursive_mutex;
        using ScopedMutexLock = std::lock_guard<std::mutex>;
        using ScopedRecursiveMutexLock = std::lock_guard<RecursiveMutex>;

        template<typename T> using Future = typename WEEJOBS_NAMESPACE::future<T>;

        using Event = jobs::detail::event;

        // C++17 typedefs - for now we need to support C++11 so cannot use these yet.
        //using ReadWriteMutex = std::shared_mutex;
        //using ScopedReadLock = std::shared_lock<std::shared_mutex>;
        //using ScopedWriteLock = std::unique_lock<std::shared_mutex>;
        //using ScopedReadLock = ScopedRead<Mutex>;
        //using ScopedWriteLock = ScopedWrite<Mutex>;
        //using ScopedRecursiveReadLock = ScopedRead<RecursiveMutex>;
        //using ScopedRecursiveWriteLock = ScopedWrite<RecursiveMutex>;

        /**
         * Mutex that allows many simultaneous readers but only one writer
         */
        template<typename T> class ReadWrite
        {
        public:
            void read_lock() {
                std::unique_lock<T> lock(_m);
                _unlocked.wait(lock, [&]() { return _writers == 0; });
                _readers.emplace(std::this_thread::get_id());
            }

            void read_unlock() {
                std::unique_lock<T> lock(_m);
                _readers.erase(std::this_thread::get_id());
                if (_readers.empty())
                    _unlocked.notify_one();
            }

            void read_lock(std::function<void()> f) {
                read_lock();
                f();
                read_unlock();
            }

            void write_lock() {
                std::unique_lock<T> lock(_m);
                // already holding a read lock? release it, then upgrade.
                bool upgrade = _readers.count(std::this_thread::get_id()) > 0;
                if (upgrade) {
                    _readers.erase(std::this_thread::get_id());
                    if (_readers.empty())
                        _unlocked.notify_all();
                }
                _unlocked.wait(lock, [&]() { return _writers == 0 && _readers.size() == 0; });
                ++_writers;
                if (upgrade) {
                    // remember the upgrade so we can downgrade later.
                    _upgraded_reader = std::this_thread::get_id();
                }
            }

            void write_unlock() {
                std::unique_lock<T> lock(_m);
                _writers = 0;
                bool downgrade = (_upgraded_reader == std::this_thread::get_id());
                if (downgrade) {
                    _upgraded_reader = {};
                    _readers.emplace(std::this_thread::get_id());
                }
                _unlocked.notify_one();
            }

            void write_lock(std::function<void()> f) {
                write_lock();
                f();
                write_unlock();
            }

        private:
            T _m;
            std::condition_variable_any _unlocked;
            unsigned _writers = 0u;
            std::unordered_set<std::thread::id> _readers;
            std::thread::id _upgraded_reader = {};
        };

        template<typename T>
        struct ScopedWrite {
            ScopedWrite(ReadWrite<T>& lock) : _lock(lock) { _lock.write_lock(); }
            ~ScopedWrite() { _lock.write_unlock(); }
        private:
            ReadWrite<T>& _lock;
        };

        template<typename T>
        struct ScopedRead {
            ScopedRead(ReadWrite<T>& lock) : _lock(lock) { _lock.read_lock(); }
            ~ScopedRead() { _lock.read_unlock(); }
        private:
            ReadWrite<T>& _lock;
        };

        using ReadWriteMutex = ReadWrite<Mutex>;
        using ReadWriteRecursiveMutex = ReadWrite<RecursiveMutex>;
        using ScopedReadLock = ScopedRead<Mutex>;
        using ScopedWriteLock = ScopedWrite<Mutex>;
        using ScopedRecursiveReadLock = ScopedRead<RecursiveMutex>;
        using ScopedRecursiveWriteLock = ScopedWrite<RecursiveMutex>;

        /**
        * Mutex that locks on a per-object basis
        */
        template<typename T>
        class Gate
        {
        public:
            Gate() { }

            inline void lock(const T& key) {
                std::unique_lock<std::mutex> lock(_m);
                for (;;) {
                    auto i = _keys.emplace(key);
                    if (i.second == true) // insert successful
                        return;
                    _unlocked.wait(lock);
                }
            }

            inline void unlock(const T& key) {
                std::unique_lock<std::mutex> lock(_m);
                _keys.erase(key);
                _unlocked.notify_all();
            }

        private:
            std::mutex _m;
            std::condition_variable_any _unlocked;
            std::unordered_set<T> _keys;
        };

        //! Gate the locks for the duration of this object's scope
        template<typename T>
        struct ScopedGate
        {
        public:
            //! Lock a gate based on key "key"
            ScopedGate(Gate<T>& gate, const T& key) :
                _gate(gate),
                _key(key),
                _active(true)
            {
                _gate.lock(key);
            }

            //! Lock a gate based on key "key" IFF the predicate is true,
            //! else it's a nop.
            ScopedGate(Gate<T>& gate, const T& key, bool pred) :
                _gate(gate),
                _key(key),
                _active(pred)
            {
                if (_active)
                    _gate.lock(_key);
            }

            //! End-of-scope destructor unlocks the gate
            ~ScopedGate()
            {
                if (_active)
                    _gate.unlock(_key);
            }

        private:
            Gate<T>& _gate;
            T _key;
            bool _active;
        };

        /**
         * Simple convenience construct to make another type "lockable"
         * as long as it has a default constructor
         */
        template<typename T, typename MUTEX = std::mutex>
        struct Mutexed : public T
        {
            Mutexed() : T() { }
            void lock() { _lockable_mutex.lock(); }
            void lock() const { _lockable_mutex.lock(); }
            void unlock() { _lockable_mutex.unlock(); }
            void unlock() const { _lockable_mutex.unlock(); }
            void lock(std::function<void()> func) { lock(); func(); unlock(); }
            void scoped_lock(std::function<void()> func) { lock(); func(); unlock(); }
            MUTEX& mutex() const { return _lockable_mutex; }
            T& operator = (const T& rhs) { return T::operator=(rhs); }
            T& operator = (const T&& rhs) { return T::operator=(rhs); }
        private:
            mutable MUTEX _lockable_mutex;
        };

        template<typename basic_lockable = std::mutex>
        struct scoped_lock_if_base
        {
            scoped_lock_if_base(basic_lockable& lock, bool condition) : _lock(lock), _condition(condition) {
                if (_condition) _lock.lock();
            }
            ~scoped_lock_if_base() {
                if (_condition) _lock.unlock();
            }
            basic_lockable& _lock;
            bool _condition;
        };
        using scoped_lock_if = scoped_lock_if_base<std::mutex>;
    }
}
