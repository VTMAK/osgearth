/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once

#include <osgEarth/Common>
#include <osgEarth/VisibleLayer>
#include <osgEarth/Cache>
#include <osgEarth/ModelSource>
#include <osgEarth/ShaderUtils>
#include <osgEarth/URI>
#include <osg/Node>
#include <vector>

namespace osgEarth
{
    /**
     * Layer that contains an OSG scene graph
     */
    class OSGEARTH_EXPORT ModelLayer : public VisibleLayer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public VisibleLayer::Options {
        public:        
            META_LayerOptions(osgEarth, Options, VisibleLayer::Options);
            OE_OPTION(URI, url);
            OE_OPTION(GeoPoint, position);
            OE_OPTION(osg::Vec3, orientation);
            OE_OPTION(bool, lightingEnabled, true);
            OE_OPTION(float, minPixels, 0.0f);
            OE_OPTION(ShaderPolicy, shaderPolicy, SHADERPOLICY_GENERATE);
            virtual Config getConfig() const;
        private:
            void fromConfig( const Config& conf );
        };

    public:
        META_Layer(osgEarth, ModelLayer, Options, VisibleLayer, Model);

    public:
        //! URL from which to load the model to use in this layer.
        //! Call this OR setNode, but not both. Call before opening the layer.
        void setURL(const URI& url);
        const URI& getURL() const;

        //! Sets the location at which to position the model.
        //! Call before opening the layer.
        void setPosition(const GeoPoint& value);
        const GeoPoint& getPosition() const;

        //! Sets the orientation (HPR) of the model in degrees
        //! Call before opening the layer.
        void setOrientationHPR(const osg::Vec3& value);
        const osg::Vec3& getOrientationHPR() const;

        //! Whether to generate shaders or use the default shaders
        void setShaderPolicy(const ShaderPolicy& value);
        const ShaderPolicy& getShaderPolicy() const;

        //! minimum visibility size in pixels
        void setMinPixels(float value);
        const float& getMinPixels() const;


    public: // Layer

        Status openImplementation() override;
        osg::Node* getNode() const override;
        void init() override;

    private:
        osg::ref_ptr<osg::Group> _root;
    };
}

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::ModelLayer::Options);
