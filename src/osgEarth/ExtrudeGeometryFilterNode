#pragma once

#include <osg/Object>
#include <osg/Group>
#include <osg/Matrixd>

#include <osgEarth/URI>

namespace osg
{
    class Group;
}

namespace osgEarth
{
    /**
    * Container Node for storing information about extruded geometry
    * without rendering it. VRV looks for this so it can preprocess the 
    * building geometry for Indirect Rendering.
    */
    class ExtrudeGeometryFilterNode : public osg::Node
    {
    public:
        struct ModelSymbol
        {
            URI instanceURI;
            osg::Matrixd xform;
        };

        ExtrudeGeometryFilterNode();
        ExtrudeGeometryFilterNode(osg::Group* extrusionGroup, const osg::Matrixd& xform);
        ExtrudeGeometryFilterNode(const ExtrudeGeometryFilterNode & rhs, const osg::CopyOp& copyop);

        META_Node(osgEarth, ExtrudeGeometryFilterNode);

        const osg::Group * extrusionGroup() const { return _extrusionGroup.get(); }

        void set_extrusionGroup(osg::Group * group) { _extrusionGroup = group; }

        const osg::Matrixd& xform() const { return _xform; }
        void set_xform(const osg::Matrixd& xform) { _xform = xform; }


        // needed for serialization
        const osg::Group * get_extrusionGroup() const { return _extrusionGroup.get(); }
        const osg::Matrixd& get_xform() const { return _xform; }

        void clearExtrusionGroup()
        {
            _extrusionGroup = 0;
        }

        osg::BoundingSphere computeBound() const override;

    private:
        osg::ref_ptr<osg::Group> _extrusionGroup;
        osg::Matrixd _xform;
    };

}
