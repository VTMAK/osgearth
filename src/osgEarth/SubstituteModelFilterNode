#pragma once

#include <osgEarth/Common>
#include <osgEarth/URI>

#include <osg/Object>
#include <osg/Matrixd>

namespace osgEarth
{
    /**
    * Container Node for storing information about the Sub Geometry
    * without rendering it. VRV looks for this so it can preprocess the 
    * building geometry for Indirect Rendering.
    */
    class OSGEARTH_EXPORT SubstituteModelFilterNode : public osg::Node
    {
    public:

        struct ModelSymbol
        {
            URI instanceURI;
            osg::Matrixd xform;
        };

        SubstituteModelFilterNode();

        SubstituteModelFilterNode(const SubstituteModelFilterNode& rhs, const osg::CopyOp& copyop);

        virtual ~SubstituteModelFilterNode()
        {

        }

        META_Node(osgEarth, SubstituteModelFilterNode);


        typedef std::list<ModelSymbol> ModelSymbolList;

        ModelSymbolList& modelSymbolList()
        {
            return _modelSymbolList;
        }
        const ModelSymbolList& modelSymbolList() const
        {
            return _modelSymbolList;
        }
        bool getInstanced(void) const { return _instanced; }
        void setInstanced(bool instanced) { _instanced = instanced; }

        bool getClustered(void) const { return _clustered; }
        void setClustered(bool clustered) { _clustered = clustered; }

        osg::BoundingSphere computeBound() const override;

    private:
        bool _instanced;
        bool _clustered;
        ModelSymbolList _modelSymbolList;
    };
}

