/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2020 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_PAGEDNODE_H
#define OSGEARTHUTIL_PAGEDNODE_H

#include <osgEarth/Common>
#include <osgEarth/optional>
#include <osgEarth/Threading>
#include <osgEarth/URI>
#include <osgEarth/SceneGraphCallback>
#include <osgEarth/Utils>

#include <osg/PagedLOD>
#include <osg/LOD>

#include <queue>
#include <list>
#include <memory>
#include <iterator>
#include <unordered_map>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Threading;

    /**
     * PagedNode is a group with a self-contained paged child.
     * It wraps the details of a PagedNode node into a container
     * that is easier to manage.
     *
     * To use, override the class. Call setNode() with the default
     * node to display, and implement loadChild() to load the
     * paged child node when it comes within range. Set the page-in
     * range for the paged child node with setRange() and setRangeMode().
     * Finally, call setupPaging() to complete setup.
     */
    class OSGEARTH_EXPORT PagedNode : public osg::Group
    {
    public:
        PagedNode();

        //! Sets the node to display by default when children
        //! are not loaded.
        void setNode(osg::Node* node);

        //! Override to load paged child node
        virtual osg::Node* loadChild() { return 0L; }

        //! Bounding sphere of paged data
        virtual osg::BoundingSphere getChildBound() const;

        //! Returns true by default; override for custom behavior
        virtual bool hasChild() const;

        //! Call this after setting up your data on the attach point
        void setupPaging();

        /**
         * Gets the range factor
         */
        float getRangeFactor() const { return _rangeFactor; }

        /**
         * Sets the range factor
         */
        void setRangeFactor(float rangeFactor) { _rangeFactor = rangeFactor; }

        //! Sets the page-in rage mode (distance v. pixel-size; default is distance)
        void setRangeMode(const osg::LOD::RangeMode);

        //! Sets the range (or pixel size) at which to page in the child data.
        void setRange(float range) { _range = range; }

        //! Gets whether this node is additive.
        bool getAdditive() const { return _additive; }

        //! Sets whether the child replaces the default node (non-additive)
        //! or renders alongside the default node (additive)
        void setAdditive(bool value) { _additive = value; }

    protected:
        osg::Group* _attachPoint;
        osg::PagedLOD* _plod;
        bool _additive;
        optional<float> _range;
        float _rangeFactor;
    };


    class OSGEARTH_EXPORT PagedNode2 : public osg::Group
    {
    public:
        using Loader = std::function<osg::ref_ptr<osg::Node>(Cancelable*)>;

        //! What to do with the children nodes when the async node
        //! becomes visible
        enum RefinePolicy
        {
            REFINE_REPLACE,  // async node replaces children
            REFINE_ADD       // async node combines with children
        };

    public:
        //! Construct an empty paged node
        PagedNode2();

        //! Function to run to load the asychronous child
        void setLoadFunction(const Loader& value) {
            _load = value;
        }
        const Loader& getLoadFunction() const {
            return _load;
        }

        //! Set the center of this node, which is necessary since we
        //! cannot compute the bounding sphere before the asynchronous load
        void setCenter(const osg::Vec3& value) {
            _userBS->center() = value;
        }
        const osg::Vec3& getCenter() const {
            return _userBS->center();
        }

        //! Set the radius of this node's bounding sphere, which is necessary
        //! since we cannot compute the bounding sphere before the asynchronous load
        void setRadius(float value) {
            _userBS->radius() = value;
        }
        float getRadius() const {
            return _userBS->radius();
        }

        //! Minimum distance from camera at which to render.
        void setMinRange(float value) {
            _minRange = value, _useRange = true;
        }

        //! Maximum distance from camera at which to render
        void setMaxRange(float value) {
            _maxRange = value, _useRange = true;
        }
        float getMaxRange() const {
            return _maxRange;
        }

        //! Minimum pixel extent at which to render.
        void setMinPixels(float value) {
            _minPixels = value, _useRange = false;
        }
        float getMinPixels() const {
            return _minPixels;
        }

        //! Maximum pixel extent at which to render.
        void setMaxPixels(float value) {
            _maxPixels = value, _useRange = false;
        }
        float getMaxPixels() const {
            return _maxPixels;
        }

        //! Multiple the load job's priority by this number
        void setPriorityScale(float value) {
            _priorityScale = value;
        }
        float getPriorityScale() const {
            return _priorityScale;
        }

        //! Pre- and post-merge callbacks for the async data
        void setSceneGraphCallbacks(SceneGraphCallbacks* value) {
            _callbacks = value;
        }
        SceneGraphCallbacks* getSceneGraphCallbacks() const {
            return _callbacks.get();
        }

        //! Whether to continue rendering the normal children after
        //! the asynchronous node becomes visible
        //! Default value = REFINE_REPLACE
        void setRefinePolicy(RefinePolicy value) {
            _refinePolicy = value;
        }
        RefinePolicy getRefinePolicy() const {
            return _refinePolicy;
        }

        //! Whether to pre-compile GL objects before merging
        void setPreCompileGLObjects(bool value) {
            _preCompile = value;
        }
        bool getPreCompileGLObjects() const {
            return _preCompile;
        }

        //! Whether this node will automatically unload it's content if it's not visible.
        bool getAutoUnload() const {
            return _autoUnload;
        }

        void setAutoUnload(bool value) {
            _autoUnload = value;
        }


        //! Loads the data for this node asynchronously
        void load(float priority, const osg::Object* host);

        //! Unloads the data for this node
        void unload();

        //! Whether the data is loaded for this node.
        bool isLoaded() const;


    public: // osg::Node overrides

        virtual void traverse(osg::NodeVisitor& nv) override;

        virtual osg::BoundingSphere computeBound() const override;

    protected:

        virtual ~PagedNode2();

    private:
        friend class PagingManager;

        struct Loaded {
            osg::ref_ptr<osg::Node> _node;
            osg::ref_ptr<osgUtil::StateToCompile> _state;
        };

        void* _token;
        class PagingManager* _pagingManager;
        osg::ref_ptr<SceneGraphCallbacks> _callbacks;
        RefinePolicy _refinePolicy;
        std::atomic_bool _loadTriggered;
        std::atomic_bool _compileTriggered;
        std::atomic_bool _mergeTriggered;
        bool _merged;
        Future<Loaded> _loaded;
        Future<osg::ref_ptr<osg::Node>> _compiled;
        Mutex _mutex;
        optional<osg::BoundingSphere> _userBS;
        float _minRange;
        float _maxRange;
        float _minPixels;
        float _maxPixels;
        bool _useRange;
        float _priorityScale;
        Job _job;
        bool _preCompile;
        std::function<osg::ref_ptr<osg::Node>(Cancelable*)> _load;
        std::atomic_int _revision;
        bool _autoUnload;

        bool merge(int revision);
    };


    class OSGEARTH_EXPORT PagingManager : public osg::Group
    {
    public:

        PagingManager();

        inline void* use(PagedNode2* node, void* token) {
            ScopedMutexLock lock(_trackerMutex);
            return _tracker.use(node, token);
        }

    public:
        virtual void traverse(osg::NodeVisitor& nv) override;

    protected:
        virtual ~PagingManager() { }

    private:
        Mutex _trackerMutex;
        SentryTracker<osg::ref_ptr<PagedNode2>> _tracker;
        std::list<PagedNode2*> _trash;

        mutable Mutex _mergeMutex;
        struct ToMerge {
            osg::observer_ptr<PagedNode2> _node;
            int _revision;
        };
        std::queue<ToMerge> _mergeQueue;
        unsigned _mergesPerFrame;
        std::atomic_bool _newFrame;

        inline void merge(PagedNode2* host) {
            ScopedMutexLock lock(_mergeMutex);
            ToMerge toMerge;
            toMerge._node = host;
            toMerge._revision = host->_revision;
            _mergeQueue.push(std::move(toMerge));
        }

        friend class PagedNode2;
    };

} }

#endif // OSGEARTHUTIL_PAGEDNODE_H
