/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_REX_TERRAIN_LAYER_DRAWABLE_H
#define OSGEARTH_REX_TERRAIN_LAYER_DRAWABLE_H 1

#include "DrawTileCommand"
#include "DrawState"

#include <osgEarth/ImageLayer>
#include <osgEarth/GLUtils>
#include <osgEarth/TextureArena>

#include <vector>

using namespace osgEarth;

namespace osgEarth { namespace REX
{
    class TerrainRenderData;

    /**
     * Drawable for single "Layer" i.e. rendering pass. 
     * It is important that LayerDrawables be rendered in the order in which
     * they appear. Since all LayerDrawables share a common bounds, this 
     * should happen automatically, but let's keep an eye out for trouble.
     */
    class LayerDrawable : public osg::Drawable
    {
    public:
        LayerDrawable();

        void accept(osg::NodeVisitor& nv) { Drawable::accept(nv); }

        // The (sorted) list of tiles to render for this layer
        DrawTileCommands  _tiles;

        // Determines whether to use the default surface shader program
        Layer::RenderType _renderType;

        // Pointer back to the actual Map layer, if there is one
        const Layer* _layer;

        // If _layer is a VisibleLayer, this will be set as well, otherwise nullptr
        const VisibleLayer* _visibleLayer;

        // If _layer is an ImageLayer, this will be set as well, otherwise nullptr
        const ImageLayer* _imageLayer;

        // If _layer is a PatchLayer, this will be set, otherwise nullptr
        const PatchLayer* _patchLayer;

        // Layer render order, which is pushed into a Uniform at render time.
        // This value is assigned at cull time by RexTerrainEngineNode.
        int _drawOrder;

        // The last layer to render will have this flag set, which will
        // prompt the render to dirty the osg::State to prevent corruption.
        // This flag is set at cull time by RexTerrainEngineNode.
        bool _clearOsgState;

        // Reference the terrain-wide state
        DrawState::Ptr _drawState;

        // Whether to render this layer.
        bool _draw;

        // Whether to use indirect rendering, which requires GL 4.6.
        bool _useIndirectRendering;

        class EngineContext* _context;

    public: // osg::Drawable
        
        void drawImplementation(osg::RenderInfo& ri) const override;

        // All LayerDrawables share the common terrain bounds.
        osg::BoundingSphere computeBound() const override { return _drawState->_bs; }
        osg::BoundingBox computeBoundingBox() const override { return _drawState->_box; }
        bool supports(const osg::PrimitiveFunctor&) const override { return true; }
        void accept(osg::PrimitiveFunctor& functor) const override;
        bool supports(const osg::PrimitiveIndexFunctor&) const override { return true; }
        void accept(osg::PrimitiveIndexFunctor&) const override;
        void releaseGLObjects(osg::State*) const override;
        void resizeGLObjectBuffers(unsigned size) override;

    protected:

        // overriden to prevent OSG from releasing GL objects on an attached stateset.
        virtual ~LayerDrawable();

    private:

        // **** GL4 rendering support ****

        // SSBO data elements
        // must align to 16 bytes
        // maps directly into an SSBO, so don't cross the vec4 streams
        #define NUM_VERTS 417

        #define NUM_SHARED_SAMPLERS 8

        // data shared across all tiles
        struct GlobalBuffer
        {
            float uvs[NUM_VERTS * 2];
            float padding[2];
            float morphConstants[19*2]; //TODO
            float padding2[2];
        };

        struct TileBuffer
        {
            float verts[NUM_VERTS * 4];
            float upvectors[NUM_VERTS * 4];
            float tileKey[4];
            float modelViewMatrix[4 * 4];
            float colorMat[4 * 4];
            float parentMat[4 * 4];
            float elevMat[4 * 4];
            float normalMat[4 * 4];
            float sharedMat[NUM_SHARED_SAMPLERS][4 * 4];
            int colorIndex;
            int parentIndex;
            int elevIndex;
            int normalIndex;
            int sharedIndex[NUM_SHARED_SAMPLERS];
            int drawOrder; // todo: stuff this somewhere else
            float padding[3];

            TileBuffer() :
                colorIndex(-1),
                elevIndex(-1),
                normalIndex(-1),
                parentIndex(-1) { }
        };

        // Things maintained on a per-graphics-context basis
        struct GCState
        {
            GLuint vao;
            GLBuffer::Ptr vbo;
            GLBuffer::Ptr ebo;
            GLBuffer::Ptr global;
            GLBuffer::Ptr tiles;
            GLBuffer::Ptr commands;
        };

        struct RenderState
        {
            RenderState() {
                gcState.resize(64);
            }
            std::vector<TileBuffer> tilebuf;
            std::vector<DrawElementsIndirectCommand> commands;
            osg::buffered_object<GCState> gcState;
            DrawTileCommands _previous_tiles;
        };
        mutable RenderState _rs;

        // todo: move higher and share?
        mutable osg::ref_ptr<TextureArena> _textures;

        void drawImplementationDirect(osg::RenderInfo& ri) const;

        void drawImplementationIndirect(osg::RenderInfo& ri) const;
    };


    // Straight list of LayerDrawables.
    using LayerDrawableList = std::vector<osg::ref_ptr<LayerDrawable>>;
    using LayerDrawableMap = std::unordered_map<UID, osg::ref_ptr<LayerDrawable>>;

} } // namespace 

#endif // OSGEARTH_REX_TERRAIN_LAYER_DRAWABLE_H
