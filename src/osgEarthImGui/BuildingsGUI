/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */
#pragma once

#include <osgEarthImGui/ImGuiPanel>
#include <osgEarthBuildings/BuildingLayer>
#include <osgEarthBuildings/Parapet>

using namespace osgEarth::Buildings;

namespace osgEarth
{
    class BuildingsGUI : public ImGuiPanel
    {
    private:
        osg::observer_ptr<MapNode> _mapNode;
        osg::observer_ptr< BuildingLayer > _buildingLayer;
        char _nameFilter[256];
        char _tagFilter[256];
        float _minHeightFilter;
        float _maxHeightFilter;
        float _minAreaFilter;
        float _maxAreaFilter;
        bool _enableHeightFilter;
        bool _enableAreaFilter;

    public:
        BuildingsGUI() :
            ImGuiPanel("Buildings"),
            _minHeightFilter(0.0f),
            _maxHeightFilter(FLT_MAX),
            _minAreaFilter(0.0f),
            _maxAreaFilter(FLT_MAX),
            _enableHeightFilter(false),
            _enableAreaFilter(false)
        {
            memset(_nameFilter, 0, sizeof(_nameFilter));
            memset(_tagFilter, 0, sizeof(_tagFilter));
        }

        void load(const Config& conf) override
        {
            conf.get("MinHeight", _minHeightFilter);
            conf.get("MaxHeight", _maxHeightFilter);
            conf.get("MinArea", _minAreaFilter);
            conf.get("MaxArea", _maxAreaFilter);
            conf.get("EnableHeightFilter", _enableHeightFilter);
            conf.get("EnableAreaFilter", _enableAreaFilter);
            std::string name;
            if (conf.get("Name", name))
            {
                strncpy(_nameFilter, name.c_str(), sizeof(_nameFilter) - 1);
            }
            std::string tags;
            if (conf.get("Tags", tags))
            {
                strncpy(_tagFilter, tags.c_str(), sizeof(_tagFilter) - 1);
            }
        }

        void save(Config& conf) override
        {
            conf.set("MinHeight", _minHeightFilter);
            conf.set("MaxHeight", _maxHeightFilter);
            conf.set("MinArea", _minAreaFilter);
            conf.set("MaxArea", _maxAreaFilter);
            conf.set("EnableHeightFilter", _enableHeightFilter);
            conf.set("EnableAreaFilter", _enableAreaFilter);
            conf.set("Name", std::string(_nameFilter));
            conf.set("Tags", std::string(_tagFilter));
        }

        void draw(osg::RenderInfo& ri) override
        {
            if (!isVisible()) return;
            if (!findNodeOrHide(_mapNode, ri)) return;

            if (!_buildingLayer)
            {
                _buildingLayer = _mapNode->getMap()->getLayer<BuildingLayer>();
            }

            if (ImGui::Begin(name(), visible(), ImGuiWindowFlags_NoScrollbar))
            {
                if (!_buildingLayer.valid())
                {
                    ImGui::Text("No BuildingLayer found in Map.");
                }
                else
                {
                    ImGui::Text("Building layer: %s", _buildingLayer->getName().c_str());
                    ImGui::Text("Catalog: %s", _buildingLayer->getBuildingCatalog()->getURI().full().c_str());

                    // Filter controls
                    ImGui::Text("Name:");
                    ImGui::SameLine();
                    ImGui::SetNextItemWidth(200);
                    ImGui::InputText("##name", _nameFilter, 256);

                    ImGui::SameLine();
                    ImGui::Text("Tags (comma separated):");
                    ImGui::SameLine();
                    ImGui::SetNextItemWidth(300);
                    ImGui::InputText("##tags", _tagFilter, 256);

                    ImGui::Checkbox("Height Filter", &_enableHeightFilter);
                    ImGui::SameLine();
                    ImGui::BeginDisabled(!_enableHeightFilter);
                    ImGui::SetNextItemWidth(100);
                    ImGui::InputFloat("##minHeight", &_minHeightFilter, 0.0f, 0.0f, "%.2f");
                    ImGui::SameLine();
                    ImGui::Text("-");
                    ImGui::SameLine();
                    ImGui::SetNextItemWidth(100);
                    ImGui::InputFloat("##maxHeight", &_maxHeightFilter, 0.0f, 0.0f, "%.2f");
                    ImGui::EndDisabled();
                    
                    ImGui::Checkbox("Area Filter", &_enableAreaFilter);
                    ImGui::SameLine();
                    ImGui::BeginDisabled(!_enableAreaFilter);
                    ImGui::SetNextItemWidth(100);
                    ImGui::InputFloat("##minArea", &_minAreaFilter, 0.0f, 0.0f, "%.2f");
                    ImGui::SameLine();
                    ImGui::Text("-");
                    ImGui::SameLine();
                    ImGui::SetNextItemWidth(100);
                    ImGui::InputFloat("##maxArea", &_maxAreaFilter, 0.0f, 0.0f, "%.2f");
                    ImGui::EndDisabled();

                    // Parse tags filter
                    TagVector filterTags;
                    if (strlen(_tagFilter) > 0)
                    {
                        std::string tagsStr(_tagFilter);
                        filterTags = StringTokenizer()
                            .delim(",")
                            .standardQuotes()
                            .tokenize(tagsStr);                        
                    }

                    ImVec2 availableContent = ImGui::GetContentRegionAvail();
                    ImVec2 textSize = ImGui::CalcTextSize("A");
                    ImVec2 tableSize(0, availableContent.y - textSize.y);

                    unsigned int filteredCount = 0;

                    if (ImGui::BeginTable("BuildingTable", 7, ImGuiTableFlags_ScrollY | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders, tableSize))
                    {
                        ImGui::TableSetupScrollFreeze(0, 1);
                        ImGui::TableSetupColumn("Name", ImGuiTableColumnFlags_WidthFixed, 200.0f);
                        ImGui::TableSetupColumn("Instanced", ImGuiTableColumnFlags_WidthFixed, 80.0f);
                        ImGui::TableSetupColumn("Min Height", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                        ImGui::TableSetupColumn("Max Height", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                        ImGui::TableSetupColumn("Min Area", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                        ImGui::TableSetupColumn("Max Area", ImGuiTableColumnFlags_WidthFixed, 100.0f);
                        ImGui::TableSetupColumn("Tags", ImGuiTableColumnFlags_WidthStretch);
                        ImGui::TableHeadersRow();

                        for (BuildingVector::const_iterator itr = _buildingLayer->getBuildingCatalog()->getBuildings().begin();
                            itr != _buildingLayer->getBuildingCatalog()->getBuildings().end(); ++itr)
                        {
                            const Building* building = *itr;

                            // Apply filters
                            if (strlen(_nameFilter) > 0)
                            {
                                std::string buildingName = building->getName();
                                if (buildingName.find(_nameFilter) == std::string::npos)
                                    continue;
                            }

                            if (!filterTags.empty() && !building->containsTags(filterTags))
                                continue;

                            if (_enableHeightFilter && (building->getMinHeight() <= _minHeightFilter || building->getMaxHeight() >= _maxHeightFilter))
                                continue;

                            if (_enableAreaFilter && (building->getMinArea() <= _minAreaFilter || building->getMaxArea() >= _maxAreaFilter))
                                continue;

                            filteredCount++;

                            ImGui::TableNextColumn();
                            ImGui::Text("%s", building->getName().c_str());

                            ImGui::TableNextColumn();
                            ImGui::Text("%s", building->getInstanced() ? "true" : "false");

                            ImGui::TableNextColumn();
                            ImGui::Text("%.2f", building->getMinHeight());

                            ImGui::TableNextColumn();
                            ImGui::Text("%.2f", building->getMaxHeight());

                            ImGui::TableNextColumn();
                            ImGui::Text("%.2f", building->getMinArea());
                            ImGui::TableNextColumn();
                            ImGui::Text("%.2f", building->getMaxArea());

                            ImGui::TableNextColumn();
                            ImGui::Text("%s", building->tagString().c_str());
                        }

                        ImGui::EndTable();
                    }

                    ImGui::Text("%d / %d buildings", filteredCount, (int)_buildingLayer->getBuildingCatalog()->getBuildings().size());
                }

                ImGui::End();
            }
        }
    };
}
